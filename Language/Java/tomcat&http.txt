二、TOMCAT服务器的安装与配置
		1.常见服务器：WebLogic（BEA）、webSphere（IBM）、Tomcat（Apache）
		2.Tomcat 的下载与安装
				下载地址：http://tomcat.apache.org/
				安装目录不能包含中文和空格
				JAVA_HOME环境变量指定Tomcat运行时所要用的jdk所在的位置，注意，配到目录就行了，不用指定到bin
				端口占用问题：netstat -ano命令查看端口占用信息
				Catalina_Home环境变量：startup.bat启动哪个tomcat由此环境变量指定，如果不配置则启动当前tomcat，推荐不要配置此环境变量
		3.Tomcat的目录结构
			bin--存放tomcat启动关闭所用的批处理文件
			conf--tomcat的配置文件，最终要的是server.xml
				*实验:修改servlet.xml,更改tomcat运行所在的端口号，从8080改为80
			lib--tomcat运行所需jar包
			logs--tomcat运行时产生的日志文件
			temp--tomcat运行时使用的临时目录，不需要我们关注
			webapps--web应用所应存放的目录
			work--tomcat工作目录，后面学jsp用到
		4.虚拟主机（一个真实主机可以运行多个网站，对于浏览器来说访问这些网站感觉起来就像这些网站都运行在自己的独立主机中一样，所以，我们可以说这里的每一个网站都运行在一个虚拟主机上，一个网站就是一个虚拟主机）
			4.1配置虚拟主机
				在server.xml中<Engine>标签下配置<Host>,其中name属性指定虚拟主机名，appBase指定虚拟主机所在的目录
				只在servlet.xml中配置Hosts，还不能是其他人通过虚拟主机名访问网站，还需要在DNS服务器上注册一把，我们可以使用hosts文件模拟这个过程
				默认虚拟主机：在配置多个虚拟主机的情况下，如果浏览器使用ip地址直接访问网站时，该使用哪个虚拟主机响应呢？可以在<Engine>标签上设置defaultHost来指定
		5.web应用（web资源不能直接交给虚拟主机，需要按照功能组织用目录成一个web应用再交给虚拟主机管理）
				5.1web应用的目录结构
					web应用目录
						|
							-html、css、js、jsp
						|
							-WEB-INF
								|
									-classes
								|
									-lib
								|
									-web.xml
					5.2web.xml文件的作用：
						某个web资源配置为web应用首页
						将servlet程序映射到某个url地址上
						为web应用配置监听器
						为web应用配置过滤器
						但凡涉及到对web资源进行配置，都需要通过web.xml文件
							*实验：配置一个web应用的主页
					5.3web应用的虚拟目录映射
						（1）在server.xml的<Host>标签下配置<Context path="虚拟路径" docBase="真实路径">如果path=""则这个web应用就被配置为了这个虚拟主机的默认web应用
						（2）在tomcat/conf/引擎名/虚拟主机名 之下建立一个.xml文件，其中文件名用来指定虚拟路径，如果是多级的用#代替/表示，文件中配置<Context docBase="真实目录">，如果文件名起为ROOT.xml则此web应用为默认web应用
						（3）直接将web应用放置到虚拟主机对应的目录下，如果目录名起为ROOT则此web应用为默认web应用
						~如果三处都配置默认web应用则server.xml > config/.../xx.xml > webapps
					5.4杂项
						(1)打war包：方式一：jar -cvf news.war * 方式二：直接用压缩工具压缩为zip包，该后缀为.war
						(2)通用context和通用web.xml，所有的<Context>都继承子conf/context.xml,所有的web.xml都继承自conf/web.xml
						(3)reloadable让tomcat自动加载更新后的web应用，当java程序修改后不用重启，服务器自动从新加载，开发时设为true方便开发，发布时设为false，提高性能
						(4)Tomcat管理平台，可以在conf/tomcat-users.xml下配置用户名密码及权限
						
					6.作业
							配置一个www.google.com这样一台虚拟主机，其中包含news应用和mail应用，news应用中有一个new.html。实现在浏览器中输入www.google.com直接看到new.html中的芙蓉姐姐。
				

二、HTTP协议
1.HTTP协议概述
		HTTP协议用于定义客户端与web服务器通迅的格式。
		HTTP是hypertext transfer protocol（超文本传输协议）的简写，它是TCP/IP协议的一个应用层协议
		HTTP使用请求-响应的方式进行传输，一个请求对应一个响应，并且请求只能是由客户端发起的。
		HTTP协议的版本：HTTP/1.0、HTTP/1.1，其中1.0一次请求发起一次连接，响应过后连接自动断开。1.1里每次请求响应后连接将保持一段时间，这段时间内可以再执行请求响应。
		
2.HTTP请求
	2.1请求行
					GET /books/java.html HTTP/1.1
					请求方式 请求的资源名 所遵循的协议
		2.1.1请求方式：GET、POST，
					其中GET方式在请求资源的URL后跟“？参数名=参数值&参数名=。。。”方式传递参数，传输的数据内容最大为1K
					其中POST方式在请求实体中传输数据
					除了用Form表单明确用method指定用post方式提交数据以外，其他的方式都是GET提交方式

	2.2请求头
		Accept: text/html,image/*    客户端可以接受的数据类型
		Accept-Charset: ISO-8859-1	客户端接受数据需要使用的字符集编码
		Accept-Encoding: gzip,compress 客户端可以接受的数据压缩格式
		Accept-Language: en-us,zh-cn  可接受的语言环境
		Host: www.it315.org:80 想要访问的虚拟主机名
		If-Modified-Since: Tue, 11 Jul 2000 18:23:51 GMT 这是和缓存相关的一个头，带着缓存资源的最后获取时间
		Referer: http://www.it315.org/index.jsp 这个头表示当前的请求来自哪个链接，这个头和防盗链的功能相关
		User-Agent: Mozilla/4.0 (compatible; MSIE 5.5; Windows NT 5.0) 客户端的一些基本信息
		Cookie 会在后面讲会话技术的时候单讲
		Connection: close/Keep-Alive 指定是否继续保持连接
		Date: Tue, 11 Jul 2000 18:23:51 GMT 当前时间



	2.3实体内容
	
	
3.HTTP响应
	3.1状态行
		HTTP/1.1 200 OK
		格式： HTTP版本号　状态码　原因叙述<CRLF>
		状态码：
			200：请求处理成功
			302：请求重定向
			304、307：服务器通知浏览器使用缓存
			404：资源未找到
			500：服务器端错误

	3.2若干响应头
			Location: http://www.it315.org/index.jsp  配合302实现请求重定向
			Server:apache tomcat 服务器的基本信息
			Content-Encoding: gzip 服务器发送数据时使用的压缩格式
			Content-Length: 80 发送数据的大小
			Content-Language: zh-cn 发送的数据使用的语言环境
			Content-Type: text/html; charset=GB2312 当前所发送的数据的基本信息，（数据的类型，所使用的编码）
			Last-Modified: Tue, 11 Jul 2000 18:23:51 GMT 缓存相关的头
			Refresh: 1;url=http://www.it315.org 通知浏览器进行定时刷新，此值可以是一个数字指定多长时间以后刷新当前页面，这个数字之后也可以接一个分号后跟一个URL地址指定多长时间后刷新到哪个URL
			Content-Disposition: attachment;filename=aaa.zip 与下载相关的头
			Transfer-Encoding: chunked 传输类型，如果是此值是一个chunked说明当前的数据是一块一块传输的
			Set-Cookie:SS=Q0=5Lb_nQ; path=/search 和cookie相关的头，后面课程单讲
			ETag: W/"83794-1208174400000" 和缓存机制相关的头
			Expires: -1 指定资源缓存的时间，如果取值为0或-1浏览就不缓存资源
			Cache-Control: no-cache  缓存相关的头，如果为no-cache则通知浏览器不缓存
			Pragma: no-cache   缓存相关的头，如果为no-cache则不缓存
			以上三个头都是用来控制缓存的，是因为历史原因造成的，不同的浏览器认识不同的头，我们通常三个一起使用保证通用性。
			Connection: close/Keep-Alive   是否保持连接
			Date: Tue, 11 Jul 2000 18:23:51 GMT 当前时间
	
	3.3实体内容
	
	
	
*额外作业：重写学生信息管理系统的DAO，用Dom4j去实现